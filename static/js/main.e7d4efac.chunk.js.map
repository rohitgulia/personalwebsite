{"version":3,"sources":["logo.svg","Pages/main.js","App.js","serviceWorker.js","index.js"],"names":["SimpleContainer","CssBaseline","Container","maxWidth","Grid","className","container","textAlign","item","xs","Typography","variant","component","Divider","hidden","columns","Column","Segment","raised","Label","as","color","ribbon","padded","attached","List","bulleted","Item","Button","circular","icon","href","target","size","App","this","props","classes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7d4efac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import * as React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Box from '@mui/material/Box';\nimport { Container } from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { Button } from 'semantic-ui-react';\nimport Typography from '@mui/material/Typography';\nimport { Image, Reveal, Label, Segment, Grid as SemanticGrid, Divider, List} from 'semantic-ui-react';\nimport Avatar from '@mui/material/Avatar';\n\nexport default function SimpleContainer() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n\n          {/* content */}\n          <Grid className=\"content\">\n                <Grid container textAlign= 'center'>\n                    <Grid item xs={12}>\n                        <Typography className={'headerFont'} variant=\"h1\" component=\"h2\"> R.S.G </Typography>\n                    </Grid>\n                </Grid>\n                <Divider hidden />\n                <Divider hidden />\n\n                <SemanticGrid columns={1}>\n                    <SemanticGrid.Column>\n                    <Segment raised>\n                        <Label as='a' color='red' ribbon>\n                            In-Office\n                        </Label>\n\n                        <Divider hidden />\n\n                        <SemanticGrid.Column>\n                            <Segment padded>\n                            <Label attached='top'>McAfee</Label>\n                            <List bulleted>\n                                <List.Item>\n                                    Working on creating new shared middleware for various Modile, Web and Desktop applications at McAfee.\n                                </List.Item>\n                                <List.Item>\n                                    Handling initiative to improve software development processes in the project.\n                                </List.Item>\n                            </List>\n                            </Segment>\n                        </SemanticGrid.Column>\n\n                        <Divider hidden />\n\n                        <SemanticGrid.Column>\n                            <Segment padded>\n                            <Label attached='top'>Vivint Solar - A Sunrun Company</Label>\n                            <List bulleted>\n                                <List.Item>\n                                    Created new features for IOT, Mobile and Web applications using Node JS, AWS, GCP, React, React Native,\n                                    Graph QL and various other tech\n                                </List.Item>\n                                <List.Item>\n                                    Worked on E-commerce platform to create payment gateway using Paypal.\n                                </List.Item>\n                                <List.Item>\n                                    Architecting and implementing solutions for grid services project using cloud computing.\n                                </List.Item>\n                                <List.Item>\n                                    Reviewing project specifications and designing technology solutions that meet or exceed performance expectations.\n                                </List.Item>\n                            </List>\n                            </Segment>\n                        </SemanticGrid.Column>\n\n                        <Divider hidden />\n\n                        <SemanticGrid.Column>\n                            <Segment padded>\n                            <Label attached='top'>Limosys Software</Label>\n                            <List bulleted>\n                                <List.Item>\n                                    Developed new concepts and redesigned web applications while collaborating with clients.\n                                </List.Item>\n                                <List.Item>\n                                    Managed development milestones from initial steps through final delivery.\n                                </List.Item>\n                                <List.Item>\n                                    Created web application for MTA to manage customer reservation and track fleet real-time.\n                                    Managing and supporting developed system and continuously upgrading application.\n                                </List.Item>\n                                <List.Item>\n                                    Reviewing project specifications and designing technology solutions that meet or exceed performance expectations.\n                                </List.Item>\n                            </List>\n                            </Segment>\n                        </SemanticGrid.Column>\n\n                    </Segment>\n                    </SemanticGrid.Column>\n\n                    <SemanticGrid.Column>\n                    <Segment raised>\n                        <Label as='a' color='teal' ribbon='right'>\n                            Outside-Office\n                        </Label>\n\n                        <Divider hidden />\n\n                        <SemanticGrid.Column>\n                            <Segment padded>\n                            <Label attached='top'>Fitness</Label>\n                            <List bulleted>\n                                <List.Item>\n                                    Believe in staying active whether its by running or going to gym or hiking.\n                                </List.Item>\n                                <List.Item>\n                                    P2 paragliding pilot. Out of tocuh for a while though since Toronto doesn't have that many mountains to fly from.\n                                </List.Item>\n                                <List.Item>\n                                    Like to eat clean and whole foods.\n                                </List.Item>\n                            </List>\n                            </Segment>\n                        </SemanticGrid.Column>\n                    </Segment>\n                    </SemanticGrid.Column>\n                </SemanticGrid>\n\n        </Grid>\n\n        <Divider hidden />\n\n        {/* footer */}\n        <Grid container textAlign= 'center' className=\"footer\">\n            <Grid item xs={4}>\n                <Button circular color='facebook' icon='facebook' href={\"https://www.facebook.com/rohit.gulia.54\"} target=\"_blank\" size={'massive'}/>\n            </Grid>\n            <Grid item xs={4}>\n                <Button circular color='linkedin' icon='linkedin' href={\"https://www.linkedin.com/in/rohitgulia\"} target=\"_blank\" size={'massive'}/>\n            </Grid>\n            <Grid item xs={4}>\n                <Button circular color='github' icon='github' href={\"https://github.com/rohitgulia\"} target=\"_blank\" size={'massive'}/>\n            </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport Main from './Pages/main';\n\nclass App extends Component {\n  render() {\n      const { classes } = this.props;\n    return (\n      <div>\n        <Main />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}